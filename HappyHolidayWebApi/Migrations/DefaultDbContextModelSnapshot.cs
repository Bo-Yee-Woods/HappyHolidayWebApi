// <auto-generated />
using HappyHolidayWebApi.Models.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HappyHolidayWebApi.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseEventId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int>("ProposerId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BaseEventId");

                    b.HasIndex("ProposerId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.EventBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerUserId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.Property<int>("TargetGroupSize");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.FriendShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FriendId");

                    b.Property<int>("SelfId");

                    b.Property<DateTime>("StartAt");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("SelfId");

                    b.ToTable("FriendShips");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayAs");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityId");

                    b.Property<bool>("IsNetural");

                    b.Property<bool>("IsUpVote");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Activity", b =>
                {
                    b.HasOne("HappyHolidayWebApi.Models.Entities.EventBase", "BaseEvent")
                        .WithMany("Activities")
                        .HasForeignKey("BaseEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "Proposer")
                        .WithMany("ProposeActivities")
                        .HasForeignKey("ProposerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Enrollment", b =>
                {
                    b.HasOne("HappyHolidayWebApi.Models.Entities.EventBase", "EventEnrolled")
                        .WithMany("Enrollments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "UserEnrolled")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.EventBase", b =>
                {
                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "Owner")
                        .WithMany("EventsOwning")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.FriendShip", b =>
                {
                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "Self")
                        .WithMany()
                        .HasForeignKey("SelfId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HappyHolidayWebApi.Models.Entities.Vote", b =>
                {
                    b.HasOne("HappyHolidayWebApi.Models.Entities.Activity", "Activity")
                        .WithMany("Votes")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HappyHolidayWebApi.Models.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
